import { deleteFiles, findMarkedFiles } from '../util/fileUtils';
import { ProjectFile } from './projectFile';
import { TokenObject } from './tokenObject'

export const PHOENIX = 'phoenix';
export const PROJECT_FILENAME = `.${PHOENIX}rc.ts`;
// Token replacement is important here to ensure this file doesn't include the marker.
export const GENERATED_FILE_MARKER = `~~ Generated by ${PHOENIX}.`;
export const REGENERATE_INSTRUCTIONS = `To modify, edit ${PROJECT_FILENAME} and run 'pnpm exec ${PHOENIX}'`;
export const GENERATED_FILE_COMMENT = `${GENERATED_FILE_MARKER} ${REGENERATE_INSTRUCTIONS}`;

interface ProjectParams {
  tokens?: Record<string, string>,
  projectFiles?: ProjectFile[]
}

export class Project {
  /**
   * The set of tokens which will be replaced during file generation.
   * The key is the token name (without escape characters), and the value is the value which will be used in the generated file.
   */
  tokens: TokenObject;
  /** Files which are part of the project. */
  projectFiles: ProjectFile[];

  constructor(params: ProjectParams | undefined = undefined) {
    this.tokens = params?.tokens ?? {};
    this.projectFiles = params?.projectFiles ?? [];
  }

  regenerateFiles(): void {
    deleteFiles(findMarkedFiles(GENERATED_FILE_MARKER));
    this.projectFiles.forEach((projectFile) => {
      if (projectFile.regenerate) {
        projectFile.regenerateFile(this.tokens);
      }
    });
  }
}